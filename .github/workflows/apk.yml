name: Build and Release APK

on:
  push:
    branches:
      - main
  # push:
  #   branches:
  #     - main # Trigger this workflow on pushes to the main branch
  # pull_request:
  #   branches:
  #     - main # Also trigger on pull requests to the main branch
  workflow_run:
    workflows: ["Sync from upstream"]
    types:
      - completed

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        with:
          ref: main # Explicitly specify the branch to checkout

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16 # Use Node.js version 16

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '11' # You can adjust the Java version if needed
          distribution: 'adopt' # or specify another distribution if needed

      - name: Extract Version from build.gradle
        id: extract_version
        run: echo "VERSION=$(grep 'versionName' app/build.gradle | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')" >> $GITHUB_ENV

      - name: Set Git User Identity
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse -q --verify ${{ env.VERSION }}; then
            echo "Tag ${{ env.VERSION }} already exists."
          else
            echo "Tag ${{ env.VERSION }} does not exist"
            exit 1
          fi
        continue-on-error: true

      - name: Create and Push Tag
        run: |
          git tag -f -a ${{ env.VERSION }} -m "Version ${{ env.VERSION }}"
          git push -f origin ${{ env.VERSION }}
        if: success() && steps.check_tag.outcome == 'failure' # Only create and push the tag if the previous steps were successful

      - name: Build the app
        run: ./gradlew build

      - name: Upload APK artifact
        uses: actions/upload-artifact@v2.2.0
        with:
          name: Release APK
          path: app/build/outputs/apk/release/app-release-*.apk

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: app/build/outputs/apk/release/*.apk
          tag_name: ${{ env.VERSION }} # Use the extracted version as the tag name
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Release URL
        id: release_url
        run: |
          echo "Release URL: ${{ steps.create_release.outputs.upload_url }}"

      - name: Comment on Pull Request
        if: always()
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Automatically provided by GitHub Actions
          script: |
            const releaseUrl = '${{ steps.release_url.outputs.upload_url }}';
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `You can download the APK from the [latest release](${releaseUrl}).`,
            });